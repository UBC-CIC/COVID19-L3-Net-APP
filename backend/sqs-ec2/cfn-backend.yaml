AWSTemplateFormatVersion: 2010-09-09
Description: EC2 Image Builder

Parameters:
  gitHubRepo:
    Type: String
    Default: https://github.com/UBC-CIC/COVID19-L3-Net-APP
  gitHubBranch:
    Default: master
    Type: String 
  Ec2KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  amazonLinuxAmi:
    Type: String 
    Description: Deep Learning AMI (Amazon Linux 2)
  s3Bucket:
    Type: String
  desiredCapacity:
    Default: 0
    Description: Desired capacity
    Type: Number
  maxSize:
    Default: 2
    Description: Maximum capacity
    Type: Number
  minSize:
    Default: 0
    Description: Mininum capacity
    Type: Number
  asgCooldown:
    Default: 30
    Description: Scaling policy cooldown duration (secs)
    Type: Number
    MinValue: 10
  asgWarmup:
    Default: 420
    Description: Steped Scaling policy warmup duration (secs)
    Type: Number
    MinValue: 10
  asgScaleOutThreshold:
    Default: 1
    Description: Queue depth threshold for scale-out
    Type: Number
    MinValue: 1
  asgScaleInThreshold:
    Default: 0
    Description: Queue depth threshold for scale-in
    Type: Number
  asgScaleInEvaluationPeriods:
    Default: 1
    Description: Evaluation periods for scale-in actions
    Type: Number
    MinValue: 1
  asgScaleOutEvaluationPeriods:
    Default: 1
    Description: Evaluation periods for scale-out actions
    Type: Number
    MinValue: 1
  asgEvaluationPeriodDuration:
    Default: 120
    Description: Evaluation period duration (secs) for scale-out / scale-in actions
    Type: Number
    MinValue: 60

Resources:
  ImageBuilderLogBucket:
    Type: AWS::S3::Bucket

  ImageBuilderInstanceRole:
    Type: AWS::IAM::Role
    Metadata:
      Comment: Role to be used by instance during image build.
    Properties:
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/EC2InstanceProfileForImageBuilder
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: "2012-10-17"
      Path: /executionServiceEC2Role/

  InstanceRoleLoggingPolicy:
    Type: AWS::IAM::Policy
    Metadata:
      Comment: Allows the instance to save log files to an S3 bucket.
    Properties:
      PolicyName: ImageBuilderLogBucketPolicy
      Roles:
        - Ref: ImageBuilderInstanceRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Resource:
              - Fn::Sub:
                  - arn:${AWS::Partition}:s3:::${BUCKET}/*
                  - BUCKET:
                      Ref: ImageBuilderLogBucket
  ImageBuilderInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /executionServiceEC2Role/
      Roles:
        - Ref: ImageBuilderInstanceRole

  ContainerBuildComponent:
    Type: 'AWS::ImageBuilder::Component'
    Properties:
      Name: !Sub Covid19-Model-Builder-${AWS::StackName}
      Platform: 'Linux'
      Version: "1.0.0"
      Description:
        !Join
          - ''
          - - 'Covid19-Component-'
            - !Ref gitHubBranch
      ChangeDescription: 'change-description'
      # Require one of 'Data' or 'Uri' for Component template
      Data: 
        !Sub 
          - |-
            name: Covid19Model - InlineData
            description: Covid19 Model Load
            schemaVersion: 1.0

            phases:                       
              - name: build
                steps:
                  - name: repoclone
                    action: ExecuteBash
                    inputs:
                      commands:
                        - aws configure set default.region ${awsRegion}
                        - sudo yum -y install git amazon-cloudwatch-agent jq                                    
                        - sudo yum -y install https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
                        - alias cp="cp -f"
                        - sudo cd /root && git clone ${gitHub}.git covid-19-app-${gitBranch} --branch ${gitBranch}
                        - sudo cp /root/covid-19-app-${gitBranch}/backend/sqs-ec2/amazon-cloudwatch-agent.json /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
                        - /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
                        - /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

                  - name: getimagename
                    action: ExecuteBash
                    inputs:
                      commands:
                        - |
                          if [[ "${gitBranch}" == "master" ]]; then
                            echo "latest"
                          else
                            echo "${gitBranch}"
                          fi

                  - name: dockerpull
                    action: ExecuteBash
                    inputs:
                      commands:          
                        - 'CONTAINER_TAG={{ build.getimagename.outputs.stdout }}'
                        - docker pull public.ecr.aws/k1w5m7b3/covid-19-api:$CONTAINER_TAG
                        - docker tag  public.ecr.aws/k1w5m7b3/covid-19-api:$CONTAINER_TAG covid-19-api:$CONTAINER_TAG
          - gitHub: !Ref gitHubRepo
            gitBranch: !Ref gitHubBranch
            awsRegion: !Sub '{AWS:Region}'

  ImageRecipe:
    Type: 'AWS::ImageBuilder::ImageRecipe'
    Properties:
      Name: !Sub Covid19-Model-Recipe-${AWS::StackName}
      Description:
        !Join
          - ''
          - - 'Covid19-Recipe-'
            - !Ref gitHubBranch
      Version: '1.0.0'
      ParentImage: !Ref amazonLinuxAmi
      Components:
        - ComponentArn: !Ref ContainerBuildComponent

  InfrastructureConfiguration:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      Name: !Sub Covid19-Model-Infrastructure-${AWS::StackName}
      Description:
        !Join
          - ''
          - - 'Covid19-Infrastructure-'
            - !Ref gitHubBranch
      InstanceProfileName:
        Ref: ImageBuilderInstanceProfile
      # Set of one or more instance types to use when building the instance. Image Builder will select a type
      # based on availability.
      InstanceTypes:
        - 'g4dn.xlarge'
        - 'g4dn.2xlarge'
      # Specify an S3 bucket and EC2 Image Builder will save logs to the bucket.
      Logging:
        S3Logs:
          S3BucketName:
            Ref: ImageBuilderLogBucket
          S3KeyPrefix: !Join [ "-", [ 'imagebuilder', !Ref "AWS::StackName" ] ]
      # If you would like to keep the instance running after a failed build, set TerminateInstanceOnFailure to false.
      TerminateInstanceOnFailure: true
      # If you do not have a default VPC or want to use a different VPC, you must specify the IDs of a subnet and one or more
      # security groups to be associated with the build instance.
      SubnetId: '{{resolve:ssm:/covid19l3/subnet1:1}}' 
      SecurityGroupIds: 
        - '{{resolve:ssm:/covid19l3/securitygroup:1}}'

  covid19l3Image:
    Type: AWS::ImageBuilder::Image
    Properties:
      ImageRecipeArn:
        Ref: ImageRecipe
      InfrastructureConfigurationArn:
        Ref: InfrastructureConfiguration

  covid19l3ImagePipeline:
    Type: 'AWS::ImageBuilder::ImagePipeline'
    Properties:
      Name: !Sub Covid19-ImagePipeline-${AWS::StackName}
      Description:
        !Join
          - ''
          - - 'Covid19-ImagePipeline-'
            - !Ref gitHubBranch
      ImageRecipeArn: !Ref ImageRecipe
      InfrastructureConfigurationArn: !Ref InfrastructureConfiguration
      Status: 'DISABLED'

  # Create an SSM Parameter Store entry with our resulting ImageId.
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-parameter.html
  ImageParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: Image Id for Covid19l3
      Name: !Sub /covid19l3/${gitHubBranch}/imageid
      Type: String
      Value:
        Fn::GetAtt: [covid19l3Image, ImageId]

###################################################################################################
#
#    Background components
#
###################################################################################################
  originAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "Covid19 L3-net app for ${gitHubBranch} on ${s3Bucket}"

  cloudFront:
    Type: AWS::CloudFront::Distribution
    Properties: 
      DistributionConfig:
        Origins:
          - DomainName: !Join
              - ''
              - - !Ref s3Bucket
                - .s3.amazonaws.com
            OriginPath: /public
            Id: !Ref s3Bucket
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - ''
                - - origin-access-identity/cloudfront/
                  - !Ref originAccessIdentity
        Enabled: true
        DefaultCacheBehavior:
            AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            CachedMethods:
            - GET
            - HEAD
            - OPTIONS
            TargetOriginId: !Ref s3Bucket
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: allow-all

  bucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: originAccessIdentity
    Properties:
      Bucket: !Ref s3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: 
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: s3Bucket
                - /*
            Principal:
              CanonicalUser: !GetAtt originAccessIdentity.S3CanonicalUserId

  bucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /covid19l3/${gitHubBranch}/s3Bucket
      Type: String
      Value: !Ref s3Bucket
      Description: !Sub s3Bucket for covid19l3 ${gitHubBranch}
    
  autoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - launchTemplate
    - autoScalingServiceLinkedRole
    Properties:
      DesiredCapacity:
        Ref: desiredCapacity
      HealthCheckType: EC2
      MaxSize:
        Ref: maxSize
      MinSize:
        Ref: minSize
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandBaseCapacity: 1
          OnDemandPercentageAboveBaseCapacity: 25
          SpotAllocationStrategy: capacity-optimized
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId:
              Ref: launchTemplate
            Version: 1
          Overrides:
          - InstanceType: g4dn.xlarge
          - InstanceType: g4dn.2xlarge
          - InstanceType: g4dn.4xlarge
      VPCZoneIdentifier:
      - '{{resolve:ssm:/covid19l3/subnet1:1}}'
      - '{{resolve:ssm:/covid19l3/subnet2:1}}'

  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: StepScaling
      AutoScalingGroupName: { Ref: autoScalingGroup }
      EstimatedInstanceWarmup: { Ref: asgWarmup }
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 5
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 5
          MetricIntervalUpperBound: 15
          ScalingAdjustment: 2
        - MetricIntervalLowerBound: 15
          MetricIntervalUpperBound: 30
          ScalingAdjustment: 3
        - MetricIntervalLowerBound: 30
          ScalingAdjustment: 4

  ScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: { Ref: asgScaleOutEvaluationPeriods }
      Threshold: { Ref: asgScaleOutThreshold }
      AlarmDescription: Alarm if SQS queue messages is above threshold
      Period: { Ref: asgEvaluationPeriodDuration }
      AlarmActions:
        - { Ref: ScaleOutPolicy }
      Dimensions:
      - Name: QueueName
        Value:
          Fn::GetAtt:
          - sqsQueue
          - QueueName
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Unit: Count
      ComparisonOperator: GreaterThanOrEqualToThreshold
      
  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: PercentChangeInCapacity
      PolicyType: StepScaling
      AutoScalingGroupName: { Ref: autoScalingGroup }
      EstimatedInstanceWarmup: { Ref: asgWarmup }
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: -100

  ScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn: autoScalingGroup
    Properties:
      EvaluationPeriods: { Ref: asgScaleInEvaluationPeriods }
      Threshold: { Ref: asgScaleInThreshold }
      AlarmDescription: Alarm if SQS queue depth is below threshold
      Period: { Ref: asgEvaluationPeriodDuration }
      AlarmActions:
        - { Ref: ScaleInPolicy }
      Dimensions:
      - Name: QueueName
        Value:
          Fn::GetAtt:
          - sqsQueue
          - QueueName
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Sum
      Unit: Count
      ComparisonOperator: LessThanOrEqualToThreshold

  autoScalingServiceLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: autoscaling.amazonaws.com
      Description: Default Service-Linked Role enables access to AWS Services and Resources
        used or managed by Auto Scaling
  # cloudWatchLogsGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     RetentionInDays: 7    
  ec2FleetServiceLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
    Properties:
      AWSServiceName: ec2fleet.amazonaws.com
      Description: Default EC2 Fleet Service Linked Role    
  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn:
    - instanceRole
    Properties:
      Path: /
      Roles:
      - Ref: instanceRole    
  instanceRole:
    Type: AWS::IAM::Role
    DependsOn:
    - sqsQueue
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: sqs:*
            Effect: Allow
            Resource:
              Fn::GetAtt:
              - sqsQueue
              - Arn
          Version: 2012-10-17
        PolicyName:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - sqsQueuePolicy
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: 2012-10-17
        PolicyName:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - cloudWatchLogsPolicy
      - PolicyDocument:
          Statement:
          - Action:
            - ssm:GetParameters
            - ssm:GetParameter
            Effect: Allow
            Resource: 'arn:aws:ssm:*:*:parameter/covid19l3*'
          Version: '2012-10-17'
        PolicyName:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - ssmParameterPolicy
      - PolicyDocument:
          Statement:
          - Action: s3:ListBucket
            Effect: Allow
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: s3Bucket
          Version: '2012-10-17'
        PolicyName:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - s3BucketListPolicy
      - PolicyDocument:
          Statement:
          - Action: ec2:DescribeTags
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - ec2DescribeTagsPolicy
      - PolicyDocument:
          Statement:
          - Action:
            - ecr:DescribeImageScanFindings
            - ecr:GetLifecyclePolicyPreview
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:DescribeImages
            - ecr:GetAuthorizationToken
            - ecr:DescribeRepositories
            - ecr:ListTagsForResource
            - ecr:ListImages
            - ecr:BatchCheckLayerAvailability
            - ecr:GetRepositoryPolicy
            - ecr:GetLifecyclePolic
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - ecrReadAndList
      - PolicyDocument:
          Statement:
          - Action:
            - s3:PutObject*
            - s3:GetObject
            - s3:DeleteObject
            Effect: Allow
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:aws:s3:::'
                - Ref: s3Bucket
                - /*
          Version: '2012-10-17'
        PolicyName:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - s3BucketReadWritePolicy
      - PolicyDocument:
          Statement:
          - Action:
            - autoscaling:SetInstanceProtection
            - autoscaling:SetInstanceHealth
            Effect: Allow
            Resource: arn:aws:autoscaling:*:*:autoScalingGroup:*:autoScalingGroupName/*
          Version: '2012-10-17'
        PolicyName:
          Fn::Join:
          - '-'
          - - Ref: AWS::StackName
            - autoScalingGroupPolicy
  
  launchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
    - instanceProfile
    - sqsQueue
    - covid19l3Image
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
            - instanceProfile
            - Arn
        ImageId:
          Fn::GetAtt: [covid19l3Image, ImageId]
        KeyName: 
          Ref: Ec2KeyName
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value:
              Ref: AWS::StackName
        UserData:
          Fn::Base64:
            !Sub
              - |-
                #!/bin/bash -xe
                yum -y --security update
                yum -y update aws-cli                
                EPHDEV=$(sudo lsblk --list | grep disk | awk '{print $1}' | while read -r line; do sudo file -s /dev/$line | awk '{if ($2 == "data") {print substr($1,1,length($1)-1)}}' ; done)
                echo -------------- Formating $EPHDEV Instance Store --------------
                sudo mkfs -t ext4 $EPHDEV
                sudo mount $EPHDEV /mnt
                sudo chown ec2-user:wheel /mnt
                echo -------------- Formating $EPHDEV Instance Store --------------
                aws configure set default.region ${awsRegion}
                systemctl status amazon-ssm-agent
                echo -------------- Git checkout and pull  --------------
                cd /root/covid-19-app-${gitBranch} && git checkout ${gitBranch} && git pull                 
                alias cp="cp -f"
                cp /root/covid-19-app-${gitBranch}/backend/sqs-ec2/spot-instance-interruption-notice-handler.service /etc/systemd/system/spot-instance-interruption-notice-handler.service
                cp /root/covid-19-app-${gitBranch}/backend/sqs-ec2/worker.service /etc/systemd/system/worker.service
                cp /root/covid-19-app-${gitBranch}/backend/sqs-ec2/spot-instance-interruption-notice-handler.sh /usr/local/bin/
                cp /root/covid-19-app-${gitBranch}/backend/sqs-ec2/worker.sh /usr/local/bin
                sed -i "s|%gitBranchVar%|${gitBranch}|g" /usr/local/bin/worker.sh
                chmod +x /usr/local/bin/spot-instance-interruption-notice-handler.sh
                chmod +x /usr/local/bin/worker.sh 
                logger "$0: -------------- Starting worker --------------"
                systemctl start worker
              - gitBranch: !Ref gitHubBranch
                gitHub: !Ref gitHubRepo
                awsRegion: !Sub '${AWS::Region}'
                  
  sqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 900

  sqsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn:
    - sqsQueue
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - sqs:SendMessage
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Resource: '*'
        Version: 2012-10-17
      Queues:
      - Ref: sqsQueue

  sqsnameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /covid19l3/${gitHubBranch}/sqsname
      Type: String
      Value: 
        Fn::GetAtt: 
          - sqsQueue
          - QueueName
      Description: !Sub SQS Queue Name for covid19l3 ${gitHubBranch}

  sqsurlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /covid19l3/${gitHubBranch}/sqsurl
      Type: String
      Value: 
        !Ref sqsQueue
      Description: !Sub SQS Queue Url for covid19l3 ${gitHubBranch}

  cloudfrontParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /covid19l3/${gitHubBranch}/cloudfrontdomain
      Type: String
      Value: 
        Fn::GetAtt:
          - cloudFront
          - DomainName
      Description: !Sub Cloudfront Domain for covid19l3 ${gitHubBranch}